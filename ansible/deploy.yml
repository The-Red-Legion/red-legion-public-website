---
- name: Deploy Red Legion PHP Website
  hosts: web_servers
  become: yes
  vars:
    app_name: red-legion-website
    app_dir: /opt/red-legion-website
    web_user: www-data
    web_group: www-data
    php_version: "8.1"

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install software-properties-common
      apt:
        name: software-properties-common
        state: present

    - name: Add ondrej/php repository for newer PHP versions
      apt_repository:
        repo: ppa:ondrej/php
        state: present

    - name: Update apt cache after adding repository
      apt:
        update_cache: yes

    - name: Install PHP and required extensions
      apt:
        name:
          - "php{{ php_version }}"
          - "php{{ php_version }}-fpm"
          - "php{{ php_version }}-mysql"
          - "php{{ php_version }}-curl"
          - "php{{ php_version }}-gd"
          - "php{{ php_version }}-xml"
          - "php{{ php_version }}-mbstring"
          - "php{{ php_version }}-zip"
          - mysql-server
          - python3-pymysql
          - composer
          - nginx
          - phpmyadmin
        state: present

    - name: Start and enable PHP-FPM
      systemd:
        name: "php{{ php_version }}-fpm"
        state: started
        enabled: yes

    - name: Start and enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Check available memory
      shell: |
        echo "=== Memory Information ==="
        free -h
        echo "=== Current memory usage ==="
        ps aux --sort=-%mem | head -10
      register: memory_info

    - name: Display memory information
      debug:
        var: memory_info.stdout_lines

    - name: Check if swap exists
      command: swapon --show
      register: swap_status
      failed_when: false

    - name: Create swap file if no swap exists
      block:
        - name: Create 1GB swap file
          command: fallocate -l 1G /swapfile
          args:
            creates: /swapfile

        - name: Set swap file permissions
          file:
            path: /swapfile
            mode: '0600'

        - name: Make swap file
          command: mkswap /swapfile
          args:
            creates: /swapfile

        - name: Enable swap file
          command: swapon /swapfile

        - name: Add swap to fstab
          lineinfile:
            path: /etc/fstab
            line: '/swapfile none swap sw 0 0'
            state: present

        - name: Set swappiness to 10 (prefer RAM over swap)
          sysctl:
            name: vm.swappiness
            value: '10'
            state: present
            reload: yes

      when: swap_status.stdout == ""

    - name: Configure MySQL for low memory usage
      template:
        src: mysql-low-memory.cnf.j2
        dest: /etc/mysql/conf.d/low-memory.cnf
        backup: yes
      notify: restart mysql

    - name: Start and enable MySQL
      systemd:
        name: mysql
        state: started
        enabled: yes

    - name: Wait for MySQL to be ready
      wait_for:
        port: 3306
        host: 127.0.0.1
        timeout: 30

    - name: Create website database and user (basic setup)
      block:
        - name: Create website database
          mysql_db:
            name: "{{ db_name }}"
            state: present
            login_unix_socket: /var/run/mysqld/mysqld.sock
          become_user: root

        - name: Create website database user
          mysql_user:
            name: "{{ db_user }}"
            password: "{{ db_pass }}"
            priv: "{{ db_name }}.*:ALL"
            host: localhost
            state: present
            login_unix_socket: /var/run/mysqld/mysqld.sock
          become_user: root

        - name: Create phpMyAdmin admin user
          mysql_user:
            name: "admin"
            password: "RedLegion2024!"
            priv: "*.*:ALL,GRANT"
            host: localhost
            state: present
            login_unix_socket: /var/run/mysqld/mysqld.sock
          become_user: root

      rescue:
        - name: Log database setup warning
          debug:
            msg: "Warning: Could not set up database automatically. Manual database configuration may be needed."

      ignore_errors: yes

    - name: Configure phpMyAdmin
      block:
        - name: Configure phpMyAdmin for nginx
          lineinfile:
            path: /etc/phpmyadmin/config.inc.php
            line: "{{ item }}"
            create: yes
          loop:
            - "<?php"
            - "$cfg['blowfish_secret'] = '{{ ansible_date_time.epoch }}{{ ansible_hostname }}secretkey';"
            - "$cfg['Servers'][$i]['auth_type'] = 'cookie';"
            - "$cfg['Servers'][$i]['host'] = 'localhost';"
            - "$cfg['Servers'][$i]['compress'] = false;"
            - "$cfg['Servers'][$i]['AllowNoPassword'] = false;"
            - "$cfg['TempDir'] = '/tmp';"

        - name: Set phpMyAdmin permissions
          file:
            path: /etc/phpmyadmin
            owner: www-data
            group: www-data
            mode: '0755'
            recurse: yes

        - name: Create phpMyAdmin symlink in website
          file:
            src: /usr/share/phpmyadmin
            dest: "{{ app_dir }}/public_html/phpmyadmin"
            state: link
            force: yes

      rescue:
        - name: Log phpMyAdmin setup warning
          debug:
            msg: "Warning: Could not configure phpMyAdmin automatically. Manual configuration may be needed."

      ignore_errors: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: '0755'

    - name: Create backup directory if app exists
      file:
        path: "{{ app_dir }}/backup"
        state: directory
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: '0755'
      when: ansible_check_mode == false

    - name: Backup existing files if they exist
      shell: |
        if [ -d "{{ app_dir }}/public_html" ]; then
          rm -rf {{ app_dir }}/backup/* 2>/dev/null || true
          cp -r {{ app_dir }}/* {{ app_dir }}/backup/ 2>/dev/null || true
        fi
      args:
        executable: /bin/bash

    - name: Remove old application files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ app_dir }}/app"
        - "{{ app_dir }}/public_html"
        - "{{ app_dir }}/composer.json"
        - "{{ app_dir }}/composer.lock"

    - name: Copy application files
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: "{{ item.mode | default('0644') }}"
      loop:
        - { src: "../app/", dest: "{{ app_dir }}/app/" }
        - { src: "../public_html/", dest: "{{ app_dir }}/public_html/" }
        - { src: "../composer.json", dest: "{{ app_dir }}/composer.json" }

    - name: Set execute permissions on bootstrap.php
      file:
        path: "{{ app_dir }}/app/bootstrap.php"
        mode: '0644'
        owner: "{{ web_user }}"
        group: "{{ web_group }}"

    - name: Create Twig cache directory
      file:
        path: "{{ app_dir }}/app/cache"
        state: directory
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: '0755'

    - name: Install Composer dependencies
      composer:
        command: install
        working_dir: "{{ app_dir }}"
        no_dev: yes
        optimize_autoloader: yes
      become_user: "{{ web_user }}"

    - name: Create .env file
      template:
        src: env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: '0640'

    - name: Configure Nginx site
      template:
        src: nginx-site.j2
        dest: /etc/nginx/sites-available/red-legion
        backup: yes
      notify: restart nginx

    - name: Remove default Nginx sites
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/nginx/sites-enabled/default
        - /etc/nginx/sites-enabled/red-legion

    - name: Enable red-legion site
      file:
        src: /etc/nginx/sites-available/red-legion
        dest: /etc/nginx/sites-enabled/red-legion
        state: link
      notify: restart nginx

    - name: Test Nginx configuration
      command: nginx -t
      register: nginx_test
      failed_when: nginx_test.rc != 0

    - name: Ensure all services are running
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - nginx
        - "php{{ php_version }}-fpm"

    - name: Install memory monitoring tools
      apt:
        name:
          - htop
          - iotop
          - sysstat
        state: present

    - name: Create memory monitoring script
      copy:
        content: |
          #!/bin/bash
          # Memory monitoring script
          echo "=== $(date) ==="
          echo "Memory usage:"
          free -h
          echo ""
          echo "Top memory consuming processes:"
          ps aux --sort=-%mem | head -10
          echo ""
          echo "MySQL process status:"
          systemctl status mysql --no-pager -l || echo "MySQL not running"
          echo ""
          echo "Available disk space:"
          df -h
          echo "================================"
        dest: /usr/local/bin/memory-check
        mode: '0755'

    - name: Add memory check to cron (every 30 minutes)
      cron:
        name: "Memory monitoring"
        minute: "*/30"
        job: "/usr/local/bin/memory-check >> /var/log/memory-monitor.log 2>&1"
        state: present

    - name: Final memory status check
      shell: |
        echo "=== Final System Status ==="
        free -h
        echo ""
        echo "Swap status:"
        swapon --show
        echo ""
        echo "MySQL status:"
        systemctl status mysql --no-pager -l | head -10
        echo ""
        echo "Top processes by memory:"
        ps aux --sort=-%mem | head -5
        echo ""
        echo "Website and phpMyAdmin access:"
        echo "Main site: http://dev.redlegion.gg/"
        echo "phpMyAdmin: http://dev.redlegion.gg/phpmyadmin"
        echo "Management portal: http://dev.redlegion.gg/management/"
        echo ""
        echo "Database credentials:"
        echo "Database: red_legion_website"
        echo "Website user: website_user / temp_password_to_be_changed"
        echo "Admin user: admin / RedLegion2024!"
      register: final_status

    - name: Display final status
      debug:
        var: final_status.stdout_lines

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted

    - name: restart php-fpm
      systemd:
        name: "php{{ php_version }}-fpm"
        state: restarted

    - name: restart mysql
      systemd:
        name: mysql
        state: restarted