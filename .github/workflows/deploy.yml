name: Deploy Red Legion Website

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy PHP Website to GCP

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Verify service account and permissions
      run: |
        echo "=== Service Account Information ==="
        gcloud auth list
        echo ""
        echo "Current account:"
        gcloud config get-value account
        echo ""
        echo "Project ID:"
        gcloud config get-value project
        echo ""
        echo "=== Testing required permissions ==="
        echo "Testing compute instance access..."
        gcloud compute instances describe arccorp-web-server --zone us-central1-a --format="value(name,status)" || echo "ERROR: Cannot access compute instance"
        echo ""
        echo "Testing SSH access..."
        gcloud compute ssh ubuntu@arccorp-web-server --zone us-central1-a --command "echo 'SSH test successful'" --ssh-flag="-o ConnectTimeout=10" || echo "ERROR: SSH access failed"
        echo ""
        echo "=== Service Account Permissions Check ==="
        SA_EMAIL=$(gcloud config get-value account)
        echo "Service account: $SA_EMAIL"
        echo ""
        echo "Checking IAM roles for this service account..."
        gcloud projects get-iam-policy ${{ secrets.GCP_PROJECT_ID }} --flatten="bindings[].members" --filter="bindings.members:$SA_EMAIL" --format="table(bindings.role)" || echo "Could not retrieve IAM policies"
        echo ""
        echo "=== Required Permissions for Deployment ==="
        echo "This service account needs these roles/permissions:"
        echo "- roles/compute.instanceAdmin (or compute.instances.get, compute.instances.setMetadata)"
        echo "- roles/compute.osLogin (or compute.instances.setMetadata for SSH keys)"
        echo "- roles/iam.serviceAccountUser (if using service account impersonation)"
        echo "- roles/compute.viewer (minimum for basic instance access)"
        echo ""
        echo "If this is the Terraform service account, it likely already has:"
        echo "- roles/compute.admin or roles/editor (which includes the above)"

    - name: Test basic gcloud SSH connectivity
      run: |
        echo "Testing direct gcloud SSH connection..."
        gcloud compute ssh ubuntu@arccorp-web-server --zone us-central1-a --command "echo 'Connection successful'; whoami; pwd"

    - name: Deploy with direct gcloud SSH approach (simpler)
      run: |
        echo "Copying files to server..."
        gcloud compute scp --recurse ansible ubuntu@arccorp-web-server:/tmp/ --zone us-central1-a

        echo "Running Ansible on the server directly..."
        gcloud compute ssh ubuntu@arccorp-web-server --zone us-central1-a --command "
          cd /tmp/ansible

          # Install Ansible on the server if needed
          if ! command -v ansible-playbook &> /dev/null; then
            sudo apt update -qq
            sudo apt install -y python3-pip
            pip3 install ansible
          fi

          # Run Ansible locally on the server
          ansible-playbook -i localhost, deploy.yml \
            --connection=local \
            -e 'db_host=localhost' \
            -e 'db_port=3306' \
            -e 'db_name=red_legion_website' \
            -e 'db_user=website_user' \
            -e 'db_pass=temp_password_to_be_changed' \
            -v

          # Clean up
          rm -rf /tmp/ansible
        "

    - name: Verify deployment
      run: |
        echo "PHP Website deployment completed!"
        echo "Main site: http://dev.redlegion.gg/"
        echo "Management portal: http://dev.redlegion.gg/management/"