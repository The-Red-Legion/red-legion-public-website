name: Deploy Red Legion Website

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy PHP Website to GCP

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Verify service account and permissions
      run: |
        echo "=== Service Account Information ==="
        gcloud auth list
        echo ""
        echo "Current account:"
        gcloud config get-value account
        echo ""
        echo "Project ID:"
        gcloud config get-value project
        echo ""
        echo "=== Testing required permissions ==="
        echo "Testing compute instance access..."
        gcloud compute instances describe arccorp-web-server --zone us-central1-a --format="value(name,status)" || echo "ERROR: Cannot access compute instance"
        echo ""
        echo "Testing SSH access..."
        gcloud compute ssh ubuntu@arccorp-web-server --zone us-central1-a --command "echo 'SSH test successful'" --ssh-flag="-o ConnectTimeout=10" || echo "ERROR: SSH access failed"
        echo ""
        echo "=== Service Account Permissions Check ==="
        SA_EMAIL=$(gcloud config get-value account)
        echo "Service account: $SA_EMAIL"
        echo ""
        echo "Checking IAM roles for this service account..."
        gcloud projects get-iam-policy ${{ secrets.GCP_PROJECT_ID }} --flatten="bindings[].members" --filter="bindings.members:$SA_EMAIL" --format="table(bindings.role)" || echo "Could not retrieve IAM policies"
        echo ""
        echo "=== Required Permissions for Deployment ==="
        echo "This service account needs these roles/permissions:"
        echo "- roles/compute.instanceAdmin (or compute.instances.get, compute.instances.setMetadata)"
        echo "- roles/compute.osLogin (or compute.instances.setMetadata for SSH keys)"
        echo "- roles/iam.serviceAccountUser (if using service account impersonation)"
        echo "- roles/compute.viewer (minimum for basic instance access)"
        echo ""
        echo "If this is the Terraform service account, it likely already has:"
        echo "- roles/compute.admin or roles/editor (which includes the above)"

    - name: Install Ansible and configure gcloud SSH
      run: |
        python -m pip install --upgrade pip
        pip install ansible

        # Configure gcloud SSH wrapper for Ansible
        mkdir -p ~/.ssh
        echo '#!/bin/bash' > ~/.ssh/gcloud_ssh_wrapper.sh
        echo 'exec gcloud compute ssh --zone=us-central1-a "$@"' >> ~/.ssh/gcloud_ssh_wrapper.sh
        chmod +x ~/.ssh/gcloud_ssh_wrapper.sh

    - name: Deploy with Ansible using gcloud connectivity
      run: |
        cd ansible

        # Get absolute path to SSH wrapper
        SSH_WRAPPER_PATH="$HOME/.ssh/gcloud_ssh_wrapper.sh"
        echo "Using SSH wrapper: $SSH_WRAPPER_PATH"

        # Create dynamic inventory with gcloud SSH proxy using absolute path
        cat > inventory-gcloud.ini << EOF
        [web_servers]
        arccorp-web-server ansible_host=ubuntu@arccorp-web-server

        [web_servers:vars]
        ansible_python_interpreter=/usr/bin/python3
        ansible_ssh_executable=$SSH_WRAPPER_PATH
        ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
        ansible_host_key_checking=False
        EOF

        # Run Ansible playbook with gcloud SSH proxy
        export ANSIBLE_HOST_KEY_CHECKING=False
        ansible-playbook -i inventory-gcloud.ini deploy.yml \
          -e "db_host=localhost" \
          -e "db_port=3306" \
          -e "db_name=red_legion_website" \
          -e "db_user=website_user" \
          -e "db_pass=temp_password_to_be_changed" \
          -v

    - name: Verify deployment
      run: |
        echo "PHP Website deployment completed!"
        echo "Main site: http://dev.redlegion.gg/"
        echo "Management portal: http://dev.redlegion.gg/management/"